name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, bugfix/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests
      run: mvn test -Dspring.profiles.active=test
      
    - name: Run integration tests
      run: mvn verify -Dspring.profiles.active=test
      
    - name: Generate test report
      run: mvn surefire-report:report
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.java-version }}
        path: |
          target/surefire-reports/
          target/site/surefire-report.html
        retention-days: 30
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.java-version }}
        path: target/site/jacoco/
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/task-manager-*.jar
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set JAVA_HOME for OWASP
      run: |
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "JAVA_HOME is set to: $JAVA_HOME"
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Task Manager'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: '--noupdate'
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: reports/
        retention-days: 30

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Run SpotBugs
      run: mvn spotbugs:check
      
    - name: Run Checkstyle
      run: mvn checkstyle:check
      
    - name: Run PMD
      run: mvn pmd:check

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t task-manager:${{ github.sha }} .
        docker tag task-manager:${{ github.sha }} task-manager:latest
        
    - name: Save Docker image
      run: |
        docker save task-manager:${{ github.sha }} | gzip > task-manager-${{ github.sha }}.tar.gz
        docker save task-manager:latest | gzip > task-manager-latest.tar.gz
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: |
          task-manager-${{ github.sha }}.tar.gz
          task-manager-latest.tar.gz
        retention-days: 30

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All tests passed!"
        else
          echo "❌ Tests failed!"
          exit 1
        fi
        
    - name: Check build results
      run: |
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Build successful!"
        else
          echo "❌ Build failed!"
          exit 1
        fi
        
    - name: Check security scan results
      run: |
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security scan passed!"
        else
          echo "⚠️ Security scan had issues!"
        fi
        
    - name: Check code quality results
      run: |
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ Code quality checks passed!"
        else
          echo "❌ Code quality checks failed!"
          exit 1
        fi
